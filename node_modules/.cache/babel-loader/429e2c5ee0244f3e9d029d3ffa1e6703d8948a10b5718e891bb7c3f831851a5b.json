{"ast":null,"code":"var _jsxFileName = \"/home/aashi/Desktop/kanban-board/src/components/KanbanBoard.js\";\n// // // import React from 'react';\n// // // import TicketCard from './TicketCard';\n\n// // // const KanbanBoard = ({ tickets }) => {\n// // //   // Define all columns you want to display\n// // //   const columns = ['Todo', 'In progress', 'Done', 'Backlog','Cancel'];\n\n// // //   return (\n// // //     <div className=\"kanban-board\">\n// // //       {columns.map((column) => (\n// // //         <div key={column} className=\"kanban-column\">\n// // //           <h2>{column}</h2>\n// // //           {tickets\n// // //             .filter((ticket) => ticket.status === column)\n// // //             .map((ticket) => (\n// // //               <TicketCard key={ticket.id} ticket={ticket} />\n// // //             ))}\n// // //           {/* Show a message if the column is empty */}\n// // //           {tickets.filter((ticket) => ticket.status === column).length === 0 && (\n// // //             <p className=\"empty-column\">No tasks in this status</p>\n// // //           )}\n// // //         </div>\n// // //       ))}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default KanbanBoard;\n\n// // import React from 'react';\n// // import TicketCard from './TicketCard';\n\n// // const KanbanBoard = ({ tickets, groupBy, sortBy, getUserById }) => {\n// //   // Define group keys based on selected group type\n// //   const getGroupKey = (ticket) => {\n// //     switch (groupBy) {\n// //       case 'Status':\n// //         return ticket.status;\n// //       case 'User':\n// //         return getUserById(ticket.userId);\n// //       case 'Priority':\n// //         return `Priority ${ticket.priority}`;\n// //       default:\n// //         return ticket.status;\n// //     }\n// //   };\n\n// //   // Sorting logic\n// //   const sortTickets = (a, b) => {\n// //     switch (sortBy) {\n// //       case 'Priority':\n// //         return b.priority - a.priority; // Higher priority first\n// //       case 'Title':\n// //         return a.title.localeCompare(b.title); // Alphabetical order\n// //       default:\n// //         return 0;\n// //     }\n// //   };\n\n// //   // Group tickets based on the selected option\n// //   const groupedTickets = tickets.reduce((acc, ticket) => {\n// //     const groupKey = getGroupKey(ticket);\n// //     if (!acc[groupKey]) {\n// //       acc[groupKey] = [];\n// //     }\n// //     acc[groupKey].push(ticket);\n// //     return acc;\n// //   }, {});\n\n// //   return (\n// //     <div className=\"kanban-board\">\n// //       {Object.keys(groupedTickets).map((group) => (\n// //         <div key={group} className=\"kanban-column\">\n// //           <h2>{group}</h2>\n// //           {groupedTickets[group]\n// //             .sort(sortTickets)\n// //             .map((ticket) => (\n// //               <TicketCard key={ticket.id} ticket={ticket} getUserById={getUserById} />\n// //             ))}\n// //         </div>\n// //       ))}\n// //     </div>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// // KanbanBoard.js\n// import React from 'react';\n// import TicketCard from './TicketCard';\n// import { PRIORITY_LEVELS } from '../utils/constants';\n\n// const KanbanBoard = ({ tickets, groupBy, sortBy, getUserById }) => {\n//   // Define group keys based on selected group type\n//   const getGroupKey = (ticket) => {\n//     switch (groupBy) {\n//       case 'Status':\n//         return ticket.status;\n//       case 'User':\n//         return getUserById(ticket.userId);\n//       case 'Priority':\n//         return PRIORITY_LEVELS[ticket.priority] || 'No Priority';\n//       default:\n//         return ticket.status;\n//     }\n//   };\n\n//   // Sorting logic\n//   const sortTickets = (a, b) => {\n//     switch (sortBy) {\n//       case 'Priority':\n//         return b.priority - a.priority; // Higher priority first\n//       case 'Title':\n//         return a.title.localeCompare(b.title); // Alphabetical order\n//       default:\n//         return 0;\n//     }\n//   };\n\n//   // Group tickets based on the selected option\n//   const groupedTickets = tickets.reduce((acc, ticket) => {\n//     const groupKey = getGroupKey(ticket);\n//     if (!acc[groupKey]) {\n//       acc[groupKey] = [];\n//     }\n//     acc[groupKey].push(ticket);\n//     return acc;\n//   }, {});\n\n//   return (\n//     <div className=\"kanban-board\">\n//       {Object.keys(groupedTickets).map((group) => (\n//         <div key={group} className=\"kanban-column\">\n//           <h2>{group}</h2>\n//           {groupedTickets[group]\n//             .sort(sortTickets)\n//             .map((ticket) => (\n//               <TicketCard key={ticket.id} ticket={ticket} getUserById={getUserById} />\n//             ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n\nimport React from 'react';\nimport TicketCard from './TicketCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = ({\n  tickets,\n  groupBy,\n  sortBy,\n  getUserById\n}) => {\n  // Define all possible statuses\n  const statuses = ['Todo', 'In progress', 'Done', 'Cancelled'];\n\n  // Group tickets by the selected grouping option\n  const groupTickets = () => {\n    if (groupBy === 'Status') {\n      // Create an object with each status as a key, even if empty\n      return statuses.reduce((acc, status) => {\n        acc[status] = tickets.filter(ticket => ticket.status === status);\n        return acc;\n      }, {});\n    }\n    // Add other groupings if needed\n    return {\n      All: tickets\n    };\n  };\n\n  // Get grouped tickets\n  const groupedTickets = groupTickets();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kanban-board\",\n    children: groupBy === 'Status' ?\n    // Render a column for each status\n    statuses.map(status => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), groupedTickets[status].length > 0 ? groupedTickets[status].map(ticket => /*#__PURE__*/_jsxDEV(TicketCard, {\n        ticket: ticket,\n        getUserById: getUserById,\n        groupBy: groupBy,\n        sortBy: sortBy\n      }, ticket.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No tickets in this status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }, this)]\n    }, status, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }, this)) :\n    /*#__PURE__*/\n    // If not grouped by status, show all tickets in a single column\n    _jsxDEV(\"div\", {\n      className: \"kanban-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), tickets.map(ticket => /*#__PURE__*/_jsxDEV(TicketCard, {\n        ticket: ticket,\n        getUserById: getUserById,\n        groupBy: groupBy,\n        sortBy: sortBy\n      }, ticket.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","TicketCard","jsxDEV","_jsxDEV","KanbanBoard","tickets","groupBy","sortBy","getUserById","statuses","groupTickets","reduce","acc","status","filter","ticket","All","groupedTickets","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","length","id","_c","$RefreshReg$"],"sources":["/home/aashi/Desktop/kanban-board/src/components/KanbanBoard.js"],"sourcesContent":["// // // import React from 'react';\n// // // import TicketCard from './TicketCard';\n\n// // // const KanbanBoard = ({ tickets }) => {\n// // //   // Define all columns you want to display\n// // //   const columns = ['Todo', 'In progress', 'Done', 'Backlog','Cancel'];\n\n// // //   return (\n// // //     <div className=\"kanban-board\">\n// // //       {columns.map((column) => (\n// // //         <div key={column} className=\"kanban-column\">\n// // //           <h2>{column}</h2>\n// // //           {tickets\n// // //             .filter((ticket) => ticket.status === column)\n// // //             .map((ticket) => (\n// // //               <TicketCard key={ticket.id} ticket={ticket} />\n// // //             ))}\n// // //           {/* Show a message if the column is empty */}\n// // //           {tickets.filter((ticket) => ticket.status === column).length === 0 && (\n// // //             <p className=\"empty-column\">No tasks in this status</p>\n// // //           )}\n// // //         </div>\n// // //       ))}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default KanbanBoard;\n\n// // import React from 'react';\n// // import TicketCard from './TicketCard';\n\n// // const KanbanBoard = ({ tickets, groupBy, sortBy, getUserById }) => {\n// //   // Define group keys based on selected group type\n// //   const getGroupKey = (ticket) => {\n// //     switch (groupBy) {\n// //       case 'Status':\n// //         return ticket.status;\n// //       case 'User':\n// //         return getUserById(ticket.userId);\n// //       case 'Priority':\n// //         return `Priority ${ticket.priority}`;\n// //       default:\n// //         return ticket.status;\n// //     }\n// //   };\n\n// //   // Sorting logic\n// //   const sortTickets = (a, b) => {\n// //     switch (sortBy) {\n// //       case 'Priority':\n// //         return b.priority - a.priority; // Higher priority first\n// //       case 'Title':\n// //         return a.title.localeCompare(b.title); // Alphabetical order\n// //       default:\n// //         return 0;\n// //     }\n// //   };\n\n// //   // Group tickets based on the selected option\n// //   const groupedTickets = tickets.reduce((acc, ticket) => {\n// //     const groupKey = getGroupKey(ticket);\n// //     if (!acc[groupKey]) {\n// //       acc[groupKey] = [];\n// //     }\n// //     acc[groupKey].push(ticket);\n// //     return acc;\n// //   }, {});\n\n// //   return (\n// //     <div className=\"kanban-board\">\n// //       {Object.keys(groupedTickets).map((group) => (\n// //         <div key={group} className=\"kanban-column\">\n// //           <h2>{group}</h2>\n// //           {groupedTickets[group]\n// //             .sort(sortTickets)\n// //             .map((ticket) => (\n// //               <TicketCard key={ticket.id} ticket={ticket} getUserById={getUserById} />\n// //             ))}\n// //         </div>\n// //       ))}\n// //     </div>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// // KanbanBoard.js\n// import React from 'react';\n// import TicketCard from './TicketCard';\n// import { PRIORITY_LEVELS } from '../utils/constants';\n\n// const KanbanBoard = ({ tickets, groupBy, sortBy, getUserById }) => {\n//   // Define group keys based on selected group type\n//   const getGroupKey = (ticket) => {\n//     switch (groupBy) {\n//       case 'Status':\n//         return ticket.status;\n//       case 'User':\n//         return getUserById(ticket.userId);\n//       case 'Priority':\n//         return PRIORITY_LEVELS[ticket.priority] || 'No Priority';\n//       default:\n//         return ticket.status;\n//     }\n//   };\n\n//   // Sorting logic\n//   const sortTickets = (a, b) => {\n//     switch (sortBy) {\n//       case 'Priority':\n//         return b.priority - a.priority; // Higher priority first\n//       case 'Title':\n//         return a.title.localeCompare(b.title); // Alphabetical order\n//       default:\n//         return 0;\n//     }\n//   };\n\n//   // Group tickets based on the selected option\n//   const groupedTickets = tickets.reduce((acc, ticket) => {\n//     const groupKey = getGroupKey(ticket);\n//     if (!acc[groupKey]) {\n//       acc[groupKey] = [];\n//     }\n//     acc[groupKey].push(ticket);\n//     return acc;\n//   }, {});\n\n//   return (\n//     <div className=\"kanban-board\">\n//       {Object.keys(groupedTickets).map((group) => (\n//         <div key={group} className=\"kanban-column\">\n//           <h2>{group}</h2>\n//           {groupedTickets[group]\n//             .sort(sortTickets)\n//             .map((ticket) => (\n//               <TicketCard key={ticket.id} ticket={ticket} getUserById={getUserById} />\n//             ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default KanbanBoard;\n\nimport React from 'react';\nimport TicketCard from './TicketCard';\n\nconst KanbanBoard = ({ tickets, groupBy, sortBy, getUserById }) => {\n  // Define all possible statuses\n  const statuses = ['Todo', 'In progress', 'Done', 'Cancelled'];\n\n  // Group tickets by the selected grouping option\n  const groupTickets = () => {\n    if (groupBy === 'Status') {\n      // Create an object with each status as a key, even if empty\n      return statuses.reduce((acc, status) => {\n        acc[status] = tickets.filter(ticket => ticket.status === status);\n        return acc;\n      }, {});\n    }\n    // Add other groupings if needed\n    return { All: tickets };\n  };\n\n  // Get grouped tickets\n  const groupedTickets = groupTickets();\n\n  return (\n    <div className=\"kanban-board\">\n      {groupBy === 'Status' ? (\n        // Render a column for each status\n        statuses.map(status => (\n          <div key={status} className=\"kanban-column\">\n            <h2>{status}</h2>\n            {groupedTickets[status].length > 0 ? (\n              groupedTickets[status].map(ticket => (\n                <TicketCard\n                  key={ticket.id}\n                  ticket={ticket}\n                  getUserById={getUserById}\n                  groupBy={groupBy}\n                  sortBy={sortBy}\n                />\n              ))\n            ) : (\n              <p>No tickets in this status</p>\n            )}\n          </div>\n        ))\n      ) : (\n        // If not grouped by status, show all tickets in a single column\n        <div className=\"kanban-column\">\n          <h2>All Tickets</h2>\n          {tickets.map(ticket => (\n            <TicketCard\n              key={ticket.id}\n              ticket={ticket}\n              getUserById={getUserById}\n              groupBy={groupBy}\n              sortBy={sortBy}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default KanbanBoard;\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,WAAW,GAAGA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC,MAAM;EAAEC;AAAY,CAAC,KAAK;EACjE;EACA,MAAMC,QAAQ,GAAG,CAAC,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,WAAW,CAAC;;EAE7D;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIJ,OAAO,KAAK,QAAQ,EAAE;MACxB;MACA,OAAOG,QAAQ,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;QACtCD,GAAG,CAACC,MAAM,CAAC,GAAGR,OAAO,CAACS,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACF,MAAM,KAAKA,MAAM,CAAC;QAChE,OAAOD,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACR;IACA;IACA,OAAO;MAAEI,GAAG,EAAEX;IAAQ,CAAC;EACzB,CAAC;;EAED;EACA,MAAMY,cAAc,GAAGP,YAAY,CAAC,CAAC;EAErC,oBACEP,OAAA;IAAKe,SAAS,EAAC,cAAc;IAAAC,QAAA,EAC1Bb,OAAO,KAAK,QAAQ;IACnB;IACAG,QAAQ,CAACW,GAAG,CAACP,MAAM,iBACjBV,OAAA;MAAkBe,SAAS,EAAC,eAAe;MAAAC,QAAA,gBACzChB,OAAA;QAAAgB,QAAA,EAAKN;MAAM;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAChBP,cAAc,CAACJ,MAAM,CAAC,CAACY,MAAM,GAAG,CAAC,GAChCR,cAAc,CAACJ,MAAM,CAAC,CAACO,GAAG,CAACL,MAAM,iBAC/BZ,OAAA,CAACF,UAAU;QAETc,MAAM,EAAEA,MAAO;QACfP,WAAW,EAAEA,WAAY;QACzBF,OAAO,EAAEA,OAAQ;QACjBC,MAAM,EAAEA;MAAO,GAJVQ,MAAM,CAACW,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKf,CACF,CAAC,gBAEFrB,OAAA;QAAAgB,QAAA,EAAG;MAAyB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAChC;IAAA,GAdOX,MAAM;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAeX,CACN,CAAC;IAAA;IAEF;IACArB,OAAA;MAAKe,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BhB,OAAA;QAAAgB,QAAA,EAAI;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACnBnB,OAAO,CAACe,GAAG,CAACL,MAAM,iBACjBZ,OAAA,CAACF,UAAU;QAETc,MAAM,EAAEA,MAAO;QACfP,WAAW,EAAEA,WAAY;QACzBF,OAAO,EAAEA,OAAQ;QACjBC,MAAM,EAAEA;MAAO,GAJVQ,MAAM,CAACW,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKf,CACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACG,EAAA,GA3DIvB,WAAW;AA6DjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}